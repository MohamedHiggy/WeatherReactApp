{"version":3,"sources":["Components/Show.js","Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Show","props","react_default","a","createElement","className","Temp","City","Country","Humidity","description","error","Form","onSubmit","getWeather","type","name","placeholder","weather_API_Key","App","state","_callee","e","city","country","API","DATA","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","humidity","weather","stop","Components_Form","this","Components_Show","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAgDiBA,EA/CJ,SAACC,GACR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEPJ,EAAMK,MACNJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,gBACIH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcJ,EAAMK,OAKxCL,EAAMM,MACNL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,SACIH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcJ,EAAMM,OAKxCN,EAAMO,SACNN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,aACIH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcJ,EAAMO,UAKxCP,EAAMQ,UACNP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,aACIH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcJ,EAAMQ,WAKxCR,EAAMS,aACNR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,gBACIH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcJ,EAAMS,cAKxCT,EAAMU,OACNT,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YACTH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,WAAsCJ,EAAMU,UC7B/CC,EAZJ,SAACX,GACR,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMS,SAAUZ,EAAMa,YAClBZ,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAOC,KAAM,OAAOC,YAAY,YAC5Cf,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAOC,KAAM,UAAUC,YAAY,eAC/Cf,EAAAC,EAAAC,cAAA,gCCJRc,EAAkB,mCA4DTC,6MAxDbC,MAAQ,CACNd,KAAK,GACLC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,MAERG,iDAAa,SAAAO,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAxB,EAAAyB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXT,EAAEU,iBACIT,EAAOD,EAAEW,OAAOC,SAASX,KAAKY,MAC9BX,EAAUF,EAAEW,OAAOC,SAASV,QAAQW,MAH/BN,EAAAE,KAAA,EAIOK,MAAK,oDAAAC,OAAqDd,EAArD,KAAAc,OAA6Db,EAA7D,WAAAa,OAA8EnB,IAJ1F,cAILO,EAJKI,EAAAS,KAAAT,EAAAE,KAAA,EAKQN,EAAIc,OALZ,OAKLb,EALKG,EAAAS,KAMRf,GAAQC,EAETgB,EAAKC,SAAS,CACZnC,KAAKoB,EAAKgB,KAAKC,KACfpC,KAAKmB,EAAKV,KACVR,QAAQkB,EAAKkB,IAAIpB,QACjBf,SAASiB,EAAKgB,KAAKG,SACnBnC,YAAYgB,EAAKoB,QAAQ,GAAGpC,YAC5BC,MAAM,KAKR6B,EAAKC,SAAS,CACVnC,KAAK,GACLC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,sBAzBD,yBAAAkB,EAAAkB,SAAA1B,oIA8BX,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,eACAH,EAAAC,EAAAC,cAAC4C,EAAD,CAAMlC,WAAYmC,KAAKnC,aACvBZ,EAAAC,EAAAC,cAAC8C,EAAD,CACE5C,KAAM2C,KAAK7B,MAAMd,KACjBC,KAAM0C,KAAK7B,MAAMb,KACjBC,QAASyC,KAAK7B,MAAMZ,QACpBC,SAAUwC,KAAK7B,MAAMX,SACrBC,YAAauC,KAAK7B,MAAMV,YACxBC,MAAOsC,KAAK7B,MAAMT,iBAnDdwC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3772d304.chunk.js","sourcesContent":["import React from 'react';\r\nconst Show = (props)  => {\r\n      return (\r\n        <div className=\"info\">\r\n            {\r\n                props.Temp && \r\n                <p className=\"info_Key\">Tempreature : \r\n                    <span className=\"info_value\">{props.Temp}</span>\r\n                </p>\r\n            }\r\n\r\n            {\r\n                props.City && \r\n                <p className=\"info_Key\">City : \r\n                    <span className=\"info_value\">{props.City}</span>\r\n                </p>\r\n            }\r\n\r\n            {\r\n                props.Country && \r\n                <p className=\"info_Key\"> Country : \r\n                    <span className=\"info_value\">{props.Country}</span>\r\n                </p>\r\n            }\r\n\r\n            {\r\n                props.Humidity && \r\n                <p className=\"info_Key\">Humidity : \r\n                    <span className=\"info_value\">{props.Humidity}</span>\r\n                </p>\r\n            }\r\n\r\n            {\r\n                props.description && \r\n                <p className=\"info_Key\">description : \r\n                    <span className=\"info_value\">{props.description}</span>\r\n                </p>\r\n            }\r\n\r\n            {\r\n                props.error && \r\n                <p className=\"info_Key\">\r\n                    <span className=\"info_value\">Error : {props.error}</span>\r\n                </p>\r\n            }\r\n        </div>\r\n      );\r\n  }\r\n  export default Show;","import React from 'react';\r\nconst Form = (props) =>   {\r\n      return (\r\n        <div>\r\n          <form onSubmit={props.getWeather}>\r\n              <input type=\"text\" name= \"city\" placeholder=\"City...\"/>\r\n              <input type=\"text\" name= \"country\" placeholder=\"Country...\"/>\r\n              <button>Get Weather</button>\r\n          </form>\r\n        </div>\r\n      );\r\n  }\r\n  \r\n  export default Form;","import React, { Component } from 'react';\nimport Show from './Components/Show'\nimport Form from './Components/Form'\nconst weather_API_Key = \"1b6780f0fa9b90cb6c78ef8a883e9588\";\n//http://api.openweathermap.org/data/2.5/weather?q=cairo,egypt&appid=e36ed364400282e43250b6c4c0274d44\nclass App extends Component {\n\n  state = {\n    Temp:'',\n    City:'',\n    Country:'',\n    Humidity:'',\n    description:'',\n    error:''\n  }\n  getWeather = async (e) =>{\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const API = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${weather_API_Key}`)\n    const DATA = await API.json();\n    if(city && country)\n    {\n      this.setState({\n        Temp:DATA.main.temp,\n        City:DATA.name,\n        Country:DATA.sys.country,\n        Humidity:DATA.main.humidity,\n        description:DATA.weather[0].description,\n        error:''\n      })\n    }\n    else\n    {\n      this.setState({\n          Temp:'',\n          City:'',\n          Country:'',\n          Humidity:'',\n          description:'',\n          error:'Please enter Data'\n      })\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n          <div className=\"container\">\n            <p className=\"P_App\">Weather App</p>\n            <Form getWeather={this.getWeather}/>\n            <Show\n              Temp={this.state.Temp}\n              City={this.state.City}\n              Country={this.state.Country}\n              Humidity={this.state.Humidity}\n              description={this.state.description}\n              error={this.state.error}\n            />\n          </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}